// bbdsq/pst.cpp
#include "pst.h"
#include "bitboard.h" // For NUM_SQUARES, get_square_index, BOARD_HEIGHT, BOARD_WIDTH
                     // (though NUM_SQUARES is also in pst.h via bitboard.h)

// --- PST Definitions for Player 1 (AI, Grey, starts top, aims for P2's den at D1) ---
// P2's Den is D1 (col 3, row 0). P2's Traps: C1(2,0), E1(4,0), D2(3,1)

const int PST_RAT_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G  // Row Index (0-8)
    -10, 50, 70, 100, 70, 50,-10, // 0 (Rank 1 - P2's Den Row)
    -5,  40, 60, 80,  60, 40, -5, // 1 (Rank 2)
     0,  20, 30, 50,  30, 20,  0, // 2 (Rank 3)
     5,  60, 80,  0,  80, 60,  5, // 3 (Rank 4 - River, P2 side)
     5,  50, 70,  0,  70, 50,  5, // 4 (Rank 5 - River, Middle)
     2,  20, 30,  0,  30, 20,  2, // 5 (Rank 6 - River, P1 side)
     0,   0,  5,  10,  5,  0,  0, // 6 (Rank 7 - P1 Land)
    -20,-10,  0,  0,  0,-10,-20, // 7 (Rank 8 - P1 Land)
    -50,-30,-10,-20,-10,-30,-50  // 8 (Rank 9 - P1 Back Rank)
};

// P1's Den D9 (3,8). P1's Traps: C9(2,8), E9(4,8), D8(3,7)
const int PST_CAT_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -50,-40,-30,-20,-30,-40,-50, // 0 (Rank 1)
    -40,-30,-20,-10,-20,-30,-40, // 1 (Rank 2)
    -30,-20,-10,  0,-10,-20,-30, // 2 (Rank 3)
    -20,-10,  0,  5,  0,-10,-20, // 3 (Rank 4)
    -10,  0,  5, 10,  5,  0,-10, // 4 (Rank 5)
      0,  5, 20, 30, 20,  5,  0, // 5 (Rank 6)
     10, 20, 40, 50, 40, 20, 10, // 6 (Rank 7 - P1 Trap D8 area)
     20, 40, 60, 70, 60, 40, 20, // 7 (Rank 8 - P1 Trap C9,E9 area)
      0, 50, 70, 60, 70, 50,  0  // 8 (Rank 9 - P1 Den D9, Traps C9,E9)
};

const int PST_DOG_P1[NUM_SQUARES] = { 
//COL A   B   C   D   E   F   G
    -50,-40,-30,-20,-30,-40,-50, -40,-30,-20,-10,-20,-30,-40, -30,-20,-10,  0,-10,-20,-30,
    -20,-10,  0,  5,  0,-10,-20, -10,  0,  5, 10,  5,  0,-10,   0,  5, 20, 30, 20,  5,  0,
     10, 20, 40, 50, 40, 20, 10,  20, 40, 60, 70, 60, 40, 20,   0, 50, 70, 60, 70, 50,  0
};

const int PST_WOLF_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -30,-20,-10,  0,-10,-20,-30, -20,-10,  0, 10,  0,-10,-20, -10,  0, 10, 20, 10,  0,-10,
      0, 10, 20, 30, 20, 10,  0,  10, 20, 30, 40, 30, 20, 10,   5, 15, 25, 35, 25, 15,  5,
      0, 10, 20, 30, 20, 10,  0, -10,  0, 10, 15, 10,  0,-10, -30,-10,  0,  5,  0,-10,-30
};

const int PST_PANTHER_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -20, 80,150,200,150, 80,-20, -10, 70,120,180,120, 70,-10,   0, 40, 80,100, 80, 40,  0,
     10, 20, 40, 60, 40, 20, 10,  15, 10, 20, 30, 20, 10, 15,  10,  5, 10, 15, 10,  5, 10,
      5,  0,  0,  0,  0,  0,  5, -30,-10, -5,-10, -5,-10,-30, -60,-40,-20,-30,-20,-40,-60
};

const int PST_TIGER_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -20,100,200,300,200,100,-20, -10, 80,150,250,150, 80,-10,   0, 50,100,150,100, 50,  0,
     10, 25, 50, 80, 50, 25, 10,  15, 15, 25, 40, 25, 15, 15,  10,  5, 10, 20, 10,  5, 10,
      5,  0,  0,  0,  0,  0,  5, -40,-20,-10,-15,-10,-20,-40, -80,-50,-30,-40,-30,-50,-80
};

const int PST_LION_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -20,150,300,500,300,150,-20, -10,100,200,400,200,100,-10,   0, 60,120,200,120, 60,  0,
     10, 30, 60,100, 60, 30, 10,  15, 20, 30, 50, 30, 20, 15,  10, 10, 15, 25, 15, 10, 10,
      5,  0,  0,  0,  0,  0,  5, -50,-30,-15,-20,-15,-30,-50,-100,-60,-40,-50,-40,-60,-100
};

const int PST_ELEPHANT_P1[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -20, 60,100,150,100, 60,-20, -10, 50, 80,120, 80, 50,-10,   0, 30, 50, 80, 50, 30,  0,
     10, 20, 30, 50, 30, 20, 10,  15, 25, 40, 60, 40, 25, 15,  10, 20, 30, 40, 30, 20, 10,
      5, 10, 15, 20, 15, 10,  5, -30,  0,  5,  0,  5,  0,-30, -60,-20,-10, -5,-10,-20,-60
};


// --- PST Definitions for Player 2 (Human, Brown, starts bottom, aims for P1's den at D9) ---
// These are manually mirrored (vertically) from P1's tables.
// P1's Den is D9 (col 3, row 8). P1's Traps: C9(2,8), E9(4,8), D8(3,7)

const int PST_RAT_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G // Mirrored Row Index (0-8 from P1's perspective)
    -50,-30,-10,-20,-10,-30,-50, // 8 (Rank 9 - P1 Back Rank, P2 Target Area)
    -20,-10,  0,  0,  0,-10,-20, // 7 (Rank 8)
     0,   0,  5,  10,  5,  0,  0, // 6 (Rank 7)
     2,  20, 30,  0,  30, 20,  2, // 5 (Rank 6 - River, P1 side, P2 Target Area River)
     5,  50, 70,  0,  70, 50,  5, // 4 (Rank 5 - River, Middle)
     5,  60, 80,  0,  80, 60,  5, // 3 (Rank 4 - River, P2 side, P2 Forward River)
     0,  20, 30, 50,  30, 20,  0, // 2 (Rank 3 - P2 Land)
    -5,  40, 60, 80,  60, 40, -5, // 1 (Rank 2 - P2 Land)
    -10, 50, 70, 100, 70, 50,-10  // 0 (Rank 1 - P2 Back Rank)
};

const int PST_CAT_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
      0, 50, 70, 60, 70, 50,  0, // 8 (Rank 9 - P1 Den D9, Traps C9,E9)
     20, 40, 60, 70, 60, 40, 20, // 7 (Rank 8 - P1 Trap D8 area)
     10, 20, 40, 50, 40, 20, 10, // 6 (Rank 7)
      0,  5, 20, 30, 20,  5,  0, // 5 (Rank 6)
    -10,  0,  5, 10,  5,  0,-10, // 4 (Rank 5)
    -20,-10,  0,  5,  0,-10,-20, // 3 (Rank 4)
    -30,-20,-10,  0,-10,-20,-30, // 2 (Rank 3 - Near own den/traps for P2)
    -40,-30,-20,-10,-20,-30,-40, // 1 (Rank 2 - Own traps D2 area)
    -50,-40,-30,-20,-30,-40,-50  // 0 (Rank 1 - Own Den D1, Traps C1,E1)
};

const int PST_DOG_P2[NUM_SQUARES] = { 
//COL A   B   C   D   E   F   G
      0, 50, 70, 60, 70, 50,  0,  20, 40, 60, 70, 60, 40, 20,  10, 20, 40, 50, 40, 20, 10,
      0,  5, 20, 30, 20,  5,  0, -10,  0,  5, 10,  5,  0,-10, -20,-10,  0,  5,  0,-10,-20,
    -30,-20,-10,  0,-10,-20,-30, -40,-30,-20,-10,-20,-30,-40, -50,-40,-30,-20,-30,-40,-50
};

const int PST_WOLF_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -30,-10,  0,  5,  0,-10,-30, -10,  0, 10, 15, 10,  0,-10,   0, 10, 20, 30, 20, 10,  0,
      5, 15, 25, 35, 25, 15,  5,  10, 20, 30, 40, 30, 20, 10,   0, 10, 20, 30, 20, 10,  0,
    -10,  0, 10, 20, 10,  0,-10, -20,-10,  0, 10,  0,-10,-20, -30,-20,-10,  0,-10,-20,-30
};

const int PST_PANTHER_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -60,-40,-20,-30,-20,-40,-60, -30,-10, -5,-10, -5,-10,-30,   5,  0,  0,  0,  0,  0,  5,
     10,  5, 10, 15, 10,  5, 10,  15, 10, 20, 30, 20, 10, 15,  10, 20, 40, 60, 40, 20, 10,
      0, 40, 80,100, 80, 40,  0, -10, 70,120,180,120, 70,-10, -20, 80,150,200,150, 80,-20
};

const int PST_TIGER_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -80,-50,-30,-40,-30,-50,-80, -40,-20,-10,-15,-10,-20,-40,   5,  0,  0,  0,  0,  0,  5,
     10,  5, 10, 20, 10,  5, 10,  15, 15, 25, 40, 25, 15, 15,  10, 25, 50, 80, 50, 25, 10,
      0, 50,100,150,100, 50,  0, -10, 80,150,250,150, 80,-10, -20,100,200,300,200,100,-20
};

const int PST_LION_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
   -100,-60,-40,-50,-40,-60,-100, -50,-30,-15,-20,-15,-30,-50,   5,  0,  0,  0,  0,  0,  5,
     10, 10, 15, 25, 15, 10, 10,  15, 20, 30, 50, 30, 20, 15,  10, 30, 60,100, 60, 30, 10,
      0, 60,120,200,120, 60,  0, -10,100,200,400,200,100,-10, -20,150,300,500,300,150,-20
};

const int PST_ELEPHANT_P2[NUM_SQUARES] = {
//COL A   B   C   D   E   F   G
    -60,-20,-10, -5,-10,-20,-60, -30,  0,  5,  0,  5,  0,-30,   5, 10, 15, 20, 15, 10,  5,
     10, 20, 30, 40, 30, 20, 10,  15, 25, 40, 60, 40, 25, 15,  10, 20, 30, 50, 30, 20, 10,
      0, 30, 50, 80, 50, 30,  0, -10, 50, 80,120, 80, 50,-10, -20, 60,100,150,100, 60,-20
};


